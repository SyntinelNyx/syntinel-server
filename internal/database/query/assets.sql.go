// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: assets.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addAsset = `-- name: AddAsset :one
INSERT INTO assets (asset_name, asset_OS)
VALUES ($1, $2)
RETURNING asset_id
`

type AddAssetParams struct {
	AssetName string
	AssetOs   string
}

func (q *Queries) AddAsset(ctx context.Context, arg AddAssetParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, addAsset, arg.AssetName, arg.AssetOs)
	var asset_id pgtype.UUID
	err := row.Scan(&asset_id)
	return asset_id, err
}

const getAssets = `-- name: GetAssets :many
SELECT asset_id,
    asset_OS
FROM assets
`

type GetAssetsRow struct {
	AssetID pgtype.UUID
	AssetOs string
}

func (q *Queries) GetAssets(ctx context.Context) ([]GetAssetsRow, error) {
	rows, err := q.db.Query(ctx, getAssets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAssetsRow
	for rows.Next() {
		var i GetAssetsRow
		if err := rows.Scan(&i.AssetID, &i.AssetOs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

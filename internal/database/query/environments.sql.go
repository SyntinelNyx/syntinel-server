// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: environments.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addAssetToEnvironment = `-- name: AddAssetToEnvironment :exec
INSERT INTO environment_assets (environment_id, asset_id)
VALUES ($1, $2)
ON CONFLICT (asset_id)
DO UPDATE SET environment_id = EXCLUDED.environment_id
`

type AddAssetToEnvironmentParams struct {
	EnvironmentID pgtype.UUID
	AssetID       pgtype.UUID
}

func (q *Queries) AddAssetToEnvironment(ctx context.Context, arg AddAssetToEnvironmentParams) error {
	_, err := q.db.Exec(ctx, addAssetToEnvironment, arg.EnvironmentID, arg.AssetID)
	return err
}

const getAssetsByEnvironmentID = `-- name: GetAssetsByEnvironmentID :many
SELECT a.asset_id, a.ip_address, a.sysinfo_id, a.root_account_id, a.registered_at
FROM environment_assets ea
JOIN assets a ON ea.asset_id = a.asset_id
WHERE ea.environment_id = $1
`

func (q *Queries) GetAssetsByEnvironmentID(ctx context.Context, environmentID pgtype.UUID) ([]Asset, error) {
	rows, err := q.db.Query(ctx, getAssetsByEnvironmentID, environmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.AssetID,
			&i.IpAddress,
			&i.SysinfoID,
			&i.RootAccountID,
			&i.RegisteredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnvironmentList = `-- name: GetEnvironmentList :many
WITH RECURSIVE ordered_environments AS (
  SELECT
    environment_id,
    environment_name,
    prev_env_id,
    next_env_id,
    1 AS level
  FROM environments
  WHERE prev_env_id IS NULL

  UNION ALL

  SELECT
    e.environment_id,
    e.environment_name,
    e.prev_env_id,
    e.next_env_id,
    oe.level + 1
  FROM environments e
  INNER JOIN ordered_environments oe ON e.environment_id = oe.next_env_id
)
SELECT 
  environment_id,
  environment_name,
  prev_env_id,
  next_env_id,
  level
FROM ordered_environments
ORDER BY level
`

type GetEnvironmentListRow struct {
	EnvironmentID   pgtype.UUID
	EnvironmentName string
	PrevEnvID       pgtype.UUID
	NextEnvID       pgtype.UUID
	Level           int32
}

func (q *Queries) GetEnvironmentList(ctx context.Context) ([]GetEnvironmentListRow, error) {
	rows, err := q.db.Query(ctx, getEnvironmentList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEnvironmentListRow
	for rows.Next() {
		var i GetEnvironmentListRow
		if err := rows.Scan(
			&i.EnvironmentID,
			&i.EnvironmentName,
			&i.PrevEnvID,
			&i.NextEnvID,
			&i.Level,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnassignedAssets = `-- name: GetUnassignedAssets :many
SELECT asset_id, ip_address, sysinfo_id, root_account_id, registered_at
FROM assets
WHERE root_account_id = $1
  AND asset_id NOT IN (
    SELECT asset_id FROM environment_assets
  )
`

func (q *Queries) GetUnassignedAssets(ctx context.Context, rootAccountID pgtype.UUID) ([]Asset, error) {
	rows, err := q.db.Query(ctx, getUnassignedAssets, rootAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Asset
	for rows.Next() {
		var i Asset
		if err := rows.Scan(
			&i.AssetID,
			&i.IpAddress,
			&i.SysinfoID,
			&i.RootAccountID,
			&i.RegisteredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEnvironment = `-- name: InsertEnvironment :one
INSERT INTO environments (
  environment_name, prev_env_id, next_env_id, root_account_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING environment_id
`

type InsertEnvironmentParams struct {
	EnvironmentName string
	PrevEnvID       pgtype.UUID
	NextEnvID       pgtype.UUID
	RootAccountID   pgtype.UUID
}

func (q *Queries) InsertEnvironment(ctx context.Context, arg InsertEnvironmentParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertEnvironment,
		arg.EnvironmentName,
		arg.PrevEnvID,
		arg.NextEnvID,
		arg.RootAccountID,
	)
	var environment_id pgtype.UUID
	err := row.Scan(&environment_id)
	return environment_id, err
}

const updateNextEnv = `-- name: UpdateNextEnv :exec
UPDATE environments
SET next_env_id = $2
WHERE environment_id = $1
`

type UpdateNextEnvParams struct {
	EnvironmentID pgtype.UUID
	NextEnvID     pgtype.UUID
}

func (q *Queries) UpdateNextEnv(ctx context.Context, arg UpdateNextEnvParams) error {
	_, err := q.db.Exec(ctx, updateNextEnv, arg.EnvironmentID, arg.NextEnvID)
	return err
}

const updatePrevEnv = `-- name: UpdatePrevEnv :exec
UPDATE environments
SET prev_env_id = $2
WHERE environment_id = $1
`

type UpdatePrevEnvParams struct {
	EnvironmentID pgtype.UUID
	PrevEnvID     pgtype.UUID
}

func (q *Queries) UpdatePrevEnv(ctx context.Context, arg UpdatePrevEnvParams) error {
	_, err := q.db.Exec(ctx, updatePrevEnv, arg.EnvironmentID, arg.PrevEnvID)
	return err
}

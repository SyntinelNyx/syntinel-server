// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: telemetry.sql

package query

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLatestTelemetryALL = `-- name: GetLatestTelemetryALL :many
SELECT 
    a.asset_id,
    a.ip_address,
    si.hostname,
    t.scan_time,
    t.cpu_usage,
    t.mem_used_percent,
    t.disk_used_percent
FROM telemetry t
JOIN telemetry_asset ta ON t.telemetry_id = ta.telemetry_id
JOIN assets a ON ta.asset_id = a.asset_id
JOIN system_information si ON a.sysinfo_id = si.id
WHERE t.scan_time = (
    SELECT MAX(t2.scan_time)
    FROM telemetry t2
    JOIN telemetry_asset ta2 ON t2.telemetry_id = ta2.telemetry_id
    WHERE ta2.asset_id = ta.asset_id
)
ORDER BY a.ip_address
`

type GetLatestTelemetryALLRow struct {
	AssetID         pgtype.UUID
	IpAddress       netip.Addr
	Hostname        pgtype.Text
	ScanTime        pgtype.Timestamptz
	CpuUsage        float64
	MemUsedPercent  float64
	DiskUsedPercent float64
}

func (q *Queries) GetLatestTelemetryALL(ctx context.Context) ([]GetLatestTelemetryALLRow, error) {
	rows, err := q.db.Query(ctx, getLatestTelemetryALL)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLatestTelemetryALLRow
	for rows.Next() {
		var i GetLatestTelemetryALLRow
		if err := rows.Scan(
			&i.AssetID,
			&i.IpAddress,
			&i.Hostname,
			&i.ScanTime,
			&i.CpuUsage,
			&i.MemUsedPercent,
			&i.DiskUsedPercent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTelemetryByTime = `-- name: GetTelemetryByTime :one
SELECT 
    time_bucket('1 hour', t.scan_time) AS hour,
    ta.asset_id,
    a.ip_address,
    AVG(t.cpu_usage) AS avg_cpu,
    AVG(t.mem_used_percent) AS avg_mem,
    AVG(t.disk_used_percent) AS avg_disk
FROM telemetry t
JOIN telemetry_asset ta ON t.telemetry_id = ta.telemetry_id
JOIN assets a ON ta.asset_id = a.asset_id
JOIN root_accounts ra ON ta.root_account_id = ra.account_id
WHERE t.scan_time > NOW() - INTERVAL '24 hours'
GROUP BY hour, ta.asset_id, a.ip_address
ORDER BY hour DESC, ta.asset_id
`

type GetTelemetryByTimeRow struct {
	Hour      interface{}
	AssetID   pgtype.UUID
	IpAddress netip.Addr
	AvgCpu    float64
	AvgMem    float64
	AvgDisk   float64
}

func (q *Queries) GetTelemetryByTime(ctx context.Context) (GetTelemetryByTimeRow, error) {
	row := q.db.QueryRow(ctx, getTelemetryByTime)
	var i GetTelemetryByTimeRow
	err := row.Scan(
		&i.Hour,
		&i.AssetID,
		&i.IpAddress,
		&i.AvgCpu,
		&i.AvgMem,
		&i.AvgDisk,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: telemetry.sql

package query

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAssetUptime = `-- name: GetAssetUptime :many
WITH asset_uptime_diff AS (
  SELECT
    ta.asset_id,
    ta.telemetry_id,
    t.telemetry_time,
    LAG(t.telemetry_time) OVER (PARTITION BY ta.asset_id ORDER BY t.telemetry_time) AS prev_telemetry_time,
    EXTRACT(EPOCH FROM (t.telemetry_time - LAG(t.telemetry_time) OVER (PARTITION BY ta.asset_id ORDER BY t.telemetry_time))) AS time_diff
  FROM
    telemetry_asset ta
  JOIN
    telemetry t ON ta.telemetry_id = t.telemetry_id
  WHERE
    ta.root_account_id = $1
    AND t.telemetry_time > NOW() - INTERVAL '30 days'  -- Optional: filter by the past 30 days
)
SELECT
  asset_id,
  SUM(CASE
        WHEN time_diff <= 300 THEN time_diff  -- 300 seconds = 5 minutes
        ELSE 0  -- Downtime: Ignore gaps larger than 5 minutes
      END) AS total_uptime_seconds
FROM
  asset_uptime_diff
WHERE
  prev_telemetry_time IS NOT NULL
GROUP BY
  asset_id
`

type GetAssetUptimeRow struct {
	AssetID            pgtype.UUID
	TotalUptimeSeconds int64
}

func (q *Queries) GetAssetUptime(ctx context.Context, rootAccountID pgtype.UUID) ([]GetAssetUptimeRow, error) {
	rows, err := q.db.Query(ctx, getAssetUptime, rootAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAssetUptimeRow
	for rows.Next() {
		var i GetAssetUptimeRow
		if err := rows.Scan(&i.AssetID, &i.TotalUptimeSeconds); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestTelemetryALL = `-- name: GetLatestTelemetryALL :many
SELECT 
    a.asset_id,
    a.ip_address,
    si.hostname,
    t.telemetry_time,
    t.cpu_usage,
    t.mem_used_percent,
    t.disk_used_percent
FROM telemetry t
JOIN telemetry_asset ta ON t.telemetry_id = ta.telemetry_id
JOIN assets a ON ta.asset_id = a.asset_id
JOIN system_information si ON a.sysinfo_id = si.id
WHERE t.telemetry_time = (
    SELECT MAX(t2.telemetry_time)
    FROM telemetry t2
    JOIN telemetry_asset ta2 ON t2.telemetry_id = ta2.telemetry_id
    WHERE ta2.asset_id = ta.asset_id
)
ORDER BY a.ip_address
`

type GetLatestTelemetryALLRow struct {
	AssetID         pgtype.UUID
	IpAddress       netip.Addr
	Hostname        pgtype.Text
	TelemetryTime   pgtype.Timestamptz
	CpuUsage        float64
	MemUsedPercent  float64
	DiskUsedPercent float64
}

func (q *Queries) GetLatestTelemetryALL(ctx context.Context) ([]GetLatestTelemetryALLRow, error) {
	rows, err := q.db.Query(ctx, getLatestTelemetryALL)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLatestTelemetryALLRow
	for rows.Next() {
		var i GetLatestTelemetryALLRow
		if err := rows.Scan(
			&i.AssetID,
			&i.IpAddress,
			&i.Hostname,
			&i.TelemetryTime,
			&i.CpuUsage,
			&i.MemUsedPercent,
			&i.DiskUsedPercent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTelemetryByTime = `-- name: GetTelemetryByTime :one
SELECT 
    time_bucket($1 , t.telemetry_time) AS hour,
    ta.asset_id,
    a.ip_address,
    AVG(t.cpu_usage) AS avg_cpu,
    AVG(t.mem_used_percent) AS avg_mem,
    AVG(t.disk_used_percent) AS avg_disk
FROM telemetry t
JOIN telemetry_asset ta ON t.telemetry_id = ta.telemetry_id
JOIN assets a ON ta.asset_id = a.asset_id
JOIN root_accounts ra ON ta.root_account_id = ra.account_id
WHERE t.telemetry_time > NOW() - INTERVAL $2
GROUP BY hour, ta.asset_id, a.ip_address
ORDER BY hour DESC, ta.asset_id
`

type GetTelemetryByTimeParams struct {
	TimeBucket interface{}
	Column2    pgtype.Interval
}

type GetTelemetryByTimeRow struct {
	Hour      interface{}
	AssetID   pgtype.UUID
	IpAddress netip.Addr
	AvgCpu    float64
	AvgMem    float64
	AvgDisk   float64
}

func (q *Queries) GetTelemetryByTime(ctx context.Context, arg GetTelemetryByTimeParams) (GetTelemetryByTimeRow, error) {
	row := q.db.QueryRow(ctx, getTelemetryByTime, arg.TimeBucket, arg.Column2)
	var i GetTelemetryByTimeRow
	err := row.Scan(
		&i.Hour,
		&i.AssetID,
		&i.IpAddress,
		&i.AvgCpu,
		&i.AvgMem,
		&i.AvgDisk,
	)
	return i, err
}

const insertTelemetryData = `-- name: InsertTelemetryData :exec
WITH inserted_telemetry AS (
    INSERT INTO telemetry (
        cpu_usage,
        mem_total,
        mem_available,
        mem_used,
        mem_used_percent,
        disk_total,
        disk_free,
        disk_used,
        disk_used_percent
    ) VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, $9
    )
    RETURNING telemetry_id, telemetry_time
)
INSERT INTO telemetry_asset (
    telemetry_id,
    asset_id,
    root_account_id
) VALUES (
    (SELECT telemetry_id FROM inserted_telemetry),
    $10,
    $11
)
`

type InsertTelemetryDataParams struct {
	CpuUsage        float64
	MemTotal        int64
	MemAvailable    int64
	MemUsed         int64
	MemUsedPercent  float64
	DiskTotal       int64
	DiskFree        int64
	DiskUsed        int64
	DiskUsedPercent float64
	AssetID         pgtype.UUID
	RootAccountID   pgtype.UUID
}

func (q *Queries) InsertTelemetryData(ctx context.Context, arg InsertTelemetryDataParams) error {
	_, err := q.db.Exec(ctx, insertTelemetryData,
		arg.CpuUsage,
		arg.MemTotal,
		arg.MemAvailable,
		arg.MemUsed,
		arg.MemUsedPercent,
		arg.DiskTotal,
		arg.DiskFree,
		arg.DiskUsed,
		arg.DiskUsedPercent,
		arg.AssetID,
		arg.RootAccountID,
	)
	return err
}

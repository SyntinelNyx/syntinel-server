// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: actions.sql

package query

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getActionById = `-- name: GetActionById :one
SELECT action_type, action_payload 
FROM actions
WHERE action_id = $1
`

type GetActionByIdRow struct {
	ActionType    string
	ActionPayload string
}

func (q *Queries) GetActionById(ctx context.Context, actionID pgtype.UUID) (GetActionByIdRow, error) {
	row := q.db.QueryRow(ctx, getActionById, actionID)
	var i GetActionByIdRow
	err := row.Scan(&i.ActionType, &i.ActionPayload)
	return i, err
}

const getAllActions = `-- name: GetAllActions :many
SELECT
  action_id,
  action_name,
  action_type,
  action_payload,
  action_note,
  created_by,
  created_at,
  root_account_id
FROM actions
WHERE root_account_id = $1
ORDER BY created_at DESC
`

type GetAllActionsRow struct {
	ActionID      pgtype.UUID
	ActionName    string
	ActionType    string
	ActionPayload string
	ActionNote    string
	CreatedBy     string
	CreatedAt     pgtype.Timestamptz
	RootAccountID pgtype.UUID
}

func (q *Queries) GetAllActions(ctx context.Context, rootAccountID pgtype.UUID) ([]GetAllActionsRow, error) {
	rows, err := q.db.Query(ctx, getAllActions, rootAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllActionsRow
	for rows.Next() {
		var i GetAllActionsRow
		if err := rows.Scan(
			&i.ActionID,
			&i.ActionName,
			&i.ActionType,
			&i.ActionPayload,
			&i.ActionNote,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.RootAccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAction = `-- name: InsertAction :one
INSERT INTO actions (action_name, action_type, action_payload, action_note, created_by, root_account_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING action_id
`

type InsertActionParams struct {
	ActionName    string
	ActionType    string
	ActionPayload string
	ActionNote    string
	CreatedBy     string
	RootAccountID pgtype.UUID
}

func (q *Queries) InsertAction(ctx context.Context, arg InsertActionParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, insertAction,
		arg.ActionName,
		arg.ActionType,
		arg.ActionPayload,
		arg.ActionNote,
		arg.CreatedBy,
		arg.RootAccountID,
	)
	var action_id pgtype.UUID
	err := row.Scan(&action_id)
	return action_id, err
}

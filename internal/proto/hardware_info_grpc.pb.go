// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.5
// source: internal/proto/hardware_info.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HardwareService_ReceiveHardwareInfo_FullMethodName = "/grpc.HardwareService/ReceiveHardwareInfo"
)

// HardwareServiceClient is the client API for HardwareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareServiceClient interface {
	ReceiveHardwareInfo(ctx context.Context, in *HardwareInfo, opts ...grpc.CallOption) (*Response, error)
}

type hardwareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareServiceClient(cc grpc.ClientConnInterface) HardwareServiceClient {
	return &hardwareServiceClient{cc}
}

func (c *hardwareServiceClient) ReceiveHardwareInfo(ctx context.Context, in *HardwareInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, HardwareService_ReceiveHardwareInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareServiceServer is the server API for HardwareService service.
// All implementations must embed UnimplementedHardwareServiceServer
// for forward compatibility
type HardwareServiceServer interface {
	ReceiveHardwareInfo(context.Context, *HardwareInfo) (*Response, error)
	mustEmbedUnimplementedHardwareServiceServer()
}

// UnimplementedHardwareServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHardwareServiceServer struct {
}

func (UnimplementedHardwareServiceServer) ReceiveHardwareInfo(context.Context, *HardwareInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveHardwareInfo not implemented")
}
func (UnimplementedHardwareServiceServer) mustEmbedUnimplementedHardwareServiceServer() {}

// UnsafeHardwareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareServiceServer will
// result in compilation errors.
type UnsafeHardwareServiceServer interface {
	mustEmbedUnimplementedHardwareServiceServer()
}

func RegisterHardwareServiceServer(s grpc.ServiceRegistrar, srv HardwareServiceServer) {
	s.RegisterService(&HardwareService_ServiceDesc, srv)
}

func _HardwareService_ReceiveHardwareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareServiceServer).ReceiveHardwareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareService_ReceiveHardwareInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareServiceServer).ReceiveHardwareInfo(ctx, req.(*HardwareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareService_ServiceDesc is the grpc.ServiceDesc for HardwareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.HardwareService",
	HandlerType: (*HardwareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveHardwareInfo",
			Handler:    _HardwareService_ReceiveHardwareInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/hardware_info.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.5
// source: internal/proto/agent_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentService_SendHardwareInfo_FullMethodName    = "/grpc.AgentService/SendHardwareInfo"
	AgentService_BidirectionalStream_FullMethodName = "/grpc.AgentService/BidirectionalStream"
	AgentService_SendHeartbeat_FullMethodName       = "/grpc.AgentService/SendHeartbeat"
	AgentService_SendTrivyReport_FullMethodName     = "/grpc.AgentService/SendTrivyReport"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	SendHardwareInfo(ctx context.Context, in *HardwareInfoRequest, opts ...grpc.CallOption) (*HardwareInfoResponse, error)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (AgentService_BidirectionalStreamClient, error)
	SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	SendTrivyReport(ctx context.Context, opts ...grpc.CallOption) (AgentService_SendTrivyReportClient, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) SendHardwareInfo(ctx context.Context, in *HardwareInfoRequest, opts ...grpc.CallOption) (*HardwareInfoResponse, error) {
	out := new(HardwareInfoResponse)
	err := c.cc.Invoke(ctx, AgentService_SendHardwareInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (AgentService_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], AgentService_BidirectionalStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServiceBidirectionalStreamClient{stream}
	return x, nil
}

type AgentService_BidirectionalStreamClient interface {
	Send(*ScriptResponse) error
	Recv() (*ScriptRequest, error)
	grpc.ClientStream
}

type agentServiceBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *agentServiceBidirectionalStreamClient) Send(m *ScriptResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentServiceBidirectionalStreamClient) Recv() (*ScriptRequest, error) {
	m := new(ScriptRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentServiceClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, AgentService_SendHeartbeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SendTrivyReport(ctx context.Context, opts ...grpc.CallOption) (AgentService_SendTrivyReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[1], AgentService_SendTrivyReport_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServiceSendTrivyReportClient{stream}
	return x, nil
}

type AgentService_SendTrivyReportClient interface {
	Send(*TrivyReportResponse) error
	Recv() (*TrivyReportRequest, error)
	grpc.ClientStream
}

type agentServiceSendTrivyReportClient struct {
	grpc.ClientStream
}

func (x *agentServiceSendTrivyReportClient) Send(m *TrivyReportResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentServiceSendTrivyReportClient) Recv() (*TrivyReportRequest, error) {
	m := new(TrivyReportRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	SendHardwareInfo(context.Context, *HardwareInfoRequest) (*HardwareInfoResponse, error)
	BidirectionalStream(AgentService_BidirectionalStreamServer) error
	SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	SendTrivyReport(AgentService_SendTrivyReportServer) error
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) SendHardwareInfo(context.Context, *HardwareInfoRequest) (*HardwareInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHardwareInfo not implemented")
}
func (UnimplementedAgentServiceServer) BidirectionalStream(AgentService_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedAgentServiceServer) SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}
func (UnimplementedAgentServiceServer) SendTrivyReport(AgentService_SendTrivyReportServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTrivyReport not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_SendHardwareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SendHardwareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SendHardwareInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SendHardwareInfo(ctx, req.(*HardwareInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).BidirectionalStream(&agentServiceBidirectionalStreamServer{stream})
}

type AgentService_BidirectionalStreamServer interface {
	Send(*ScriptRequest) error
	Recv() (*ScriptResponse, error)
	grpc.ServerStream
}

type agentServiceBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *agentServiceBidirectionalStreamServer) Send(m *ScriptRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentServiceBidirectionalStreamServer) Recv() (*ScriptResponse, error) {
	m := new(ScriptResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AgentService_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SendHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SendHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SendTrivyReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServiceServer).SendTrivyReport(&agentServiceSendTrivyReportServer{stream})
}

type AgentService_SendTrivyReportServer interface {
	Send(*TrivyReportRequest) error
	Recv() (*TrivyReportResponse, error)
	grpc.ServerStream
}

type agentServiceSendTrivyReportServer struct {
	grpc.ServerStream
}

func (x *agentServiceSendTrivyReportServer) Send(m *TrivyReportRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentServiceSendTrivyReportServer) Recv() (*TrivyReportResponse, error) {
	m := new(TrivyReportResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHardwareInfo",
			Handler:    _AgentService_SendHardwareInfo_Handler,
		},
		{
			MethodName: "SendHeartbeat",
			Handler:    _AgentService_SendHeartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalStream",
			Handler:       _AgentService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendTrivyReport",
			Handler:       _AgentService_SendTrivyReport_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/agent_service.proto",
}
